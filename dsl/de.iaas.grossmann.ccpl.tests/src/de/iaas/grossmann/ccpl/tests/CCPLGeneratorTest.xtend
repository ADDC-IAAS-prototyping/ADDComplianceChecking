/*
 * generated by Xtext 2.12.0
 */
package de.iaas.grossmann.ccpl.tests

import com.google.inject.Inject
import de.iaas.grossmann.ccpl.cCPL.ConstraintTemplate
import de.iaas.grossmann.ccpl.generator.CCPLGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import de.iaas.grossmann.ccpl.cCPL.ConstraintTemplate

@RunWith(XtextRunner)
@InjectWith(CCPLInjectorProvider)
class CCPLGeneratorTest {
	@Inject
	CCPLGenerator underTest
	@Inject
	ParseHelper<ConstraintTemplate> parseHelper
	
	@Test
	def void loadModel() {
		val toParse = '''
			pattern MyPattern:
			
			use NodeEvent (memory double, cpu double);
			
			context x=NodeEvent(x.cpu < memory) !cpu time 1 min, y=NodeEvent(memory = 2) time 2 sec:
			def: MyEvent(val double): (x.cpu < x.memory * 2) and 2 or 3 + 2;
			
			context x=NodeEvent last(${ao}):
			def: XYZEvent(val long, strng string): Math.floor(x.cpu), "hallo";
			
			context a=NodeEvent, b=NodeEvent time 1 sec:
			violation when: a.memory > b.memory;
			
			context xyzVar=XYZEvent, myVar=MyEvent time 30 min:
			violation when: xyzVar.strng = "testi" and myVar.val <= 12.0;
			
			context a=NodeEvent, b=NodeEvent time 1 sec, c=MyEvent(val > 2):
			violation when sequence: a -> b time 3 sec -> not a -> c;
			
			context yyy=NodeEvent !cpu time 3 sec, uuu=NodeEvent(memory > yyy.memory):
			def: AnotherEvent(val1 double, val2 double): avg(y.cpu), count + 2 + 4.5 - ${asd} > "hallo" and true or false;
			of sequence: yyy -> uuu;
			'''
		val expected = ''''''
//			from NodeEvent as x
		val result = parseHelper.parse(toParse)
		val fsa = new InMemoryFileSystemAccess()
		
		underTest.doGenerate(result.eResource, fsa, null)
		val actualOutput = fsa.allFiles.get(IFileSystemAccess::DEFAULT_OUTPUT+"MyPattern.epl").toString
		
		println(actualOutput)
		
//		Assert.assertEquals(expected, actualOutput.toString)
		Assert.assertNotNull(actualOutput.toString)
//		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
}
